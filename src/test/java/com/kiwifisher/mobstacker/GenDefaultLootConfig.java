package com.kiwifisher.mobstacker;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.kiwifisher.mobstacker.loot.api.ILootEntry;
import com.kiwifisher.mobstacker.loot.api.ILootPool;
import com.kiwifisher.mobstacker.loot.impl.ConditionKilledByPlayer;
import com.kiwifisher.mobstacker.loot.impl.ConditionPropertiesAdult;
import com.kiwifisher.mobstacker.loot.impl.ConditionPropertiesOnFire;
import com.kiwifisher.mobstacker.loot.impl.ConditionSlimeSize;
import com.kiwifisher.mobstacker.loot.impl.Function;
import com.kiwifisher.mobstacker.loot.impl.FunctionFurnaceSmelt;
import com.kiwifisher.mobstacker.loot.impl.FunctionLootingBonus;
import com.kiwifisher.mobstacker.loot.impl.FunctionMatchSheepWool;
import com.kiwifisher.mobstacker.loot.impl.FunctionSetMeta;
import com.kiwifisher.mobstacker.loot.impl.LootEntry;
import com.kiwifisher.mobstacker.loot.impl.LootPool;
import com.kiwifisher.mobstacker.loot.impl.RandomChance;

import org.bukkit.Material;

/**
 * Generates the default loot.yml file. N.B. Due to an issue with Bukkit's serialization system, the
 * DummyItemMeta currently does not save as ItemMeta and instead saves as
 * com.kiwifisher.mobstacker.DummyItemMeta. This must (for now) be manually fixed.
 *
 * @author Jikoo
 */
public class GenDefaultLootConfig {

    public static void main(String[] args) {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(new File("loot.json")))) {
            writer.write(MobStacker.getGson().toJson(getConfigValues()));
            writer.flush();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    static Map<String, Map<String, Collection<ILootPool>>> getConfigValues() {
        Map<String, Collection<ILootPool>> defaults = new HashMap<>();

        List<ILootPool> pools;
        LootPool pool;
        ConditionSlimeSize conditionSlimeSize;
        List<ILootEntry> entries;
        LootEntry entry;
        Function function;
        RandomChance randomChance;

        // TODO: COD, DOLPHIN, DROWNED, ILLUSIONER, PARROT, PHANTOM, PUFFERFISH, SALMON, TROPICAL_FISH, TURTLE
        pool = new LootPool();
        defaults.put("BAT", Collections.singletonList(pool));
        defaults.put("ENDERMITE", Collections.singletonList(pool));
        defaults.put("GIANT", Collections.singletonList(pool));
        defaults.put("OCELOT", Collections.singletonList(pool));
        defaults.put("SILVERFISH", Collections.singletonList(pool));
        defaults.put("VILLAGER", Collections.singletonList(pool));
        defaults.put("WOLF", Collections.singletonList(pool));

        pool = new LootPool();
        entry = new LootEntry();
        entry.setMaterial(Material.BLAZE_ROD);
        entry.setMinimumQuantity(0);
        entry.setConditions(Collections.singletonList(new ConditionKilledByPlayer()));
        entry.setFunctions(Collections.singletonList(new FunctionLootingBonus()));
        pool.setEntries(Collections.singletonList(entry));
        defaults.put("BLAZE", Collections.singletonList(pool));

        pools = new ArrayList<>();
        pool = new LootPool();
        entry = new LootEntry();
        entry.setMaterial(Material.STRING);
        entry.setMinimumQuantity(0);
        entry.setMaximumQuantity(2);
        entry.setFunctions(Collections.singletonList(new FunctionLootingBonus()));
        pool.setEntries(Collections.singletonList(entry));
        pools.add(pool);
        pool = new LootPool();
        pool.setConditions(Collections.singletonList(new ConditionKilledByPlayer()));
        entry = new LootEntry();
        entry.setMaterial(Material.SPIDER_EYE);
        entry.setMinimumQuantity(-1);
        entry.setMaximumQuantity(1);
        entry.setFunctions(Collections.singletonList(new FunctionLootingBonus()));
        pool.setEntries(Collections.singletonList(entry));
        pools.add(pool);
        defaults.put("CAVE_SPIDER", pools);
        defaults.put("SPIDER", pools);

        pools = new ArrayList<>();
        pool = new LootPool();
        pool.setConditions(Collections.singletonList(new ConditionPropertiesAdult()));
        entry = new LootEntry();
        entry.setMaterial(Material.FEATHER);
        entry.setMinimumQuantity(0);
        entry.setMaximumQuantity(2);
        entry.setFunctions(Collections.singletonList(new FunctionLootingBonus()));
        pool.setEntries(Collections.singletonList(entry));
        pools.add(pool);
        pool = new LootPool();
        pool.setConditions(Collections.singletonList(new ConditionPropertiesAdult()));
        entry = new LootEntry();
        entry.setMaterial(Material.CHICKEN);
        function = new FunctionFurnaceSmelt();
        function.setConditions(Collections.singletonList(new ConditionPropertiesOnFire()));
        entry.setFunctions(Arrays.asList(function, new FunctionLootingBonus()));
        pool.setEntries(Collections.singletonList(entry));
        pools.add(pool);
        defaults.put("CHICKEN", pools);

        pools = new ArrayList<>();
        pool = new LootPool();
        pool.setConditions(Collections.singletonList(new ConditionPropertiesAdult()));
        entry = new LootEntry();
        entry.setMaterial(Material.LEATHER);
        entry.setMinimumQuantity(0);
        entry.setMaximumQuantity(2);
        entry.setFunctions(Collections.singletonList(new FunctionLootingBonus()));
        pool.setEntries(Collections.singletonList(entry));
        pools.add(pool);
        pool = new LootPool();
        pool.setConditions(Collections.singletonList(new ConditionPropertiesAdult()));
        entry = new LootEntry();
        entry.setMaterial(Material.BEEF);
        entry.setMaximumQuantity(3);
        function = new FunctionFurnaceSmelt();
        function.setConditions(Collections.singletonList(new ConditionPropertiesOnFire()));
        entry.setFunctions(Arrays.asList(function, new FunctionLootingBonus()));
        pool.setEntries(Collections.singletonList(entry));
        pools.add(pool);
        defaults.put("COW", pools);
        defaults.put("MUSHROOM_COW", pools);

        pools = new ArrayList<>();
        pool = new LootPool();
        entry = new LootEntry();
        entry.setMaterial(Material.GUNPOWDER);
        entry.setMinimumQuantity(0);
        entry.setMaximumQuantity(2);
        entry.setFunctions(Collections.singletonList(new FunctionLootingBonus()));
        pool.setEntries(Collections.singletonList(entry));
        pools.add(pool);
        defaults.put("CREEPER", pools);

        pools = new ArrayList<>();
        pool = new LootPool();
        pool.setConditions(Collections.singletonList(new ConditionPropertiesAdult()));
        entry = new LootEntry();
        entry.setMaterial(Material.LEATHER);
        entry.setMinimumQuantity(0);
        entry.setMaximumQuantity(2);
        entry.setFunctions(Collections.singletonList(new FunctionLootingBonus()));
        pool.setEntries(Collections.singletonList(entry));
        pools.add(pool);
        defaults.put("DONKEY", pools);
        defaults.put("HORSE", pools);
        defaults.put("LLAMA", pools);
        defaults.put("MULE", pools);

        pools = new ArrayList<>();
        pool = new LootPool();
        entry = new LootEntry();
        entry.setMaterial(Material.PRISMARINE_SHARD);
        entry.setMinimumQuantity(0);
        entry.setMaximumQuantity(2);
        entry.setFunctions(Collections.singletonList(new FunctionLootingBonus()));
        pool.setEntries(Collections.singletonList(entry));
        pools.add(pool);
        pool = new LootPool();
        entries = new ArrayList<>();
        entry = new LootEntry();
        entry.setMaterial(Material.COD);
        entry.setWeight(3);
        entry.setFunctions(Collections.singletonList(new FunctionLootingBonus()));
        entries.add(entry);
        entry = new LootEntry();
        entry.setMaterial(Material.PRISMARINE_CRYSTALS);
        entry.setWeight(2);
        entry.setFunctions(Collections.singletonList(new FunctionLootingBonus()));
        entries.add(entry);
        entries.add(new LootEntry());
        pool.setEntries(entries);
        pools.add(pool);
        pool = new LootPool();
        pool.setConditions(Collections.singletonList(new ConditionKilledByPlayer()));
        entries = new ArrayList<>();
        entry = new LootEntry();
        entry.setMaterial(Material.COD);
        entry.setWeight(60);
        entries.add(entry);
        entry = new LootEntry();
        entry.setMaterial(Material.SALMON);
        entry.setWeight(25);
        entries.add(entry);
        entry = new LootEntry();
        entry.setMaterial(Material.TROPICAL_FISH);
        entry.setWeight(2);
        entries.add(entry);
        entry = new LootEntry();
        entry.setMaterial(Material.PUFFERFISH);
        entry.setWeight(13);
        entries.add(entry);
        pool.setEntries(entries);
        pools.add(pool);
        defaults.put("ELDER_GUARDIAN", pools);

        pools = new ArrayList<>();
        pool = new LootPool();
        entry = new LootEntry();
        entry.setMaterial(Material.ENDER_PEARL);
        entry.setMinimumQuantity(0);
        entry.setFunctions(Collections.singletonList(new FunctionLootingBonus()));
        pool.setEntries(Collections.singletonList(entry));
        pools.add(pool);
        defaults.put("ENDERMAN", pools);

        pools = new ArrayList<>();
        pool = new LootPool();
        entry = new LootEntry();
        entry.setMaterial(Material.TOTEM_OF_UNDYING);
        pool.setEntries(Collections.singletonList(entry));
        pools.add(pool);
        pool = new LootPool();
        pool.setConditions(Collections.singletonList(new ConditionKilledByPlayer()));
        entry = new LootEntry();
        entry.setMaterial(Material.EMERALD);
        entry.setMinimumQuantity(0);
        entry.setFunctions(Collections.singletonList(new FunctionLootingBonus()));
        pool.setEntries(Collections.singletonList(entry));
        pools.add(pool);
        defaults.put("EVOCATION_ILLAGER", pools);

        pools = new ArrayList<>();
        pool = new LootPool();
        entry = new LootEntry();
        entry.setMaterial(Material.ENDER_PEARL);
        entry.setMinimumQuantity(0);
        entry.setFunctions(Collections.singletonList(new FunctionLootingBonus()));
        pool.setEntries(Collections.singletonList(entry));
        pools.add(pool);
        pool = new LootPool();
        entry = new LootEntry();
        entry.setMaterial(Material.GUNPOWDER);
        entry.setMinimumQuantity(0);
        entry.setMaximumQuantity(2);
        entry.setFunctions(Collections.singletonList(new FunctionLootingBonus()));
        pool.setEntries(Collections.singletonList(entry));
        pools.add(pool);
        defaults.put("GHAST", pools);

        pools = new ArrayList<>();
        pool = new LootPool();
        entry = new LootEntry();
        entry.setMaterial(Material.PRISMARINE_SHARD);
        entry.setMinimumQuantity(0);
        entry.setMaximumQuantity(2);
        entry.setFunctions(Collections.singletonList(new FunctionLootingBonus()));
        pool.setEntries(Collections.singletonList(entry));
        pools.add(pool);
        pool = new LootPool();
        entries = new ArrayList<>();
        entry = new LootEntry();
        entry.setMaterial(Material.COD);
        entry.setWeight(2);
        entry.setFunctions(Collections.singletonList(new FunctionLootingBonus()));
        entries.add(entry);
        entry = new LootEntry();
        entry.setMaterial(Material.PRISMARINE_CRYSTALS);
        entry.setWeight(2);
        entry.setFunctions(Collections.singletonList(new FunctionLootingBonus()));
        entries.add(entry);
        entries.add(new LootEntry());
        pool.setEntries(entries);
        pools.add(pool);
        pool = new LootPool();
        pool.setConditions(Collections.singletonList(new ConditionKilledByPlayer()));
        entries = new ArrayList<>();
        entry = new LootEntry();
        entry.setMaterial(Material.COD);
        entry.setWeight(60);
        entries.add(entry);
        entry = new LootEntry();
        entry.setMaterial(Material.SALMON);
        entry.setWeight(25);
        entries.add(entry);
        entry = new LootEntry();
        entry.setMaterial(Material.TROPICAL_FISH);
        entry.setWeight(2);
        entries.add(entry);
        entry = new LootEntry();
        entry.setMaterial(Material.PUFFERFISH);
        entry.setWeight(13);
        entries.add(entry);
        pool.setEntries(entries);
        pools.add(pool);
        defaults.put("GUARDIAN", pools);

        pools = new ArrayList<>();
        pool = new LootPool();
        entry = new LootEntry();
        entry.setMaterial(Material.ROTTEN_FLESH);
        entry.setMinimumQuantity(0);
        entry.setMaximumQuantity(2);
        entry.setFunctions(Collections.singletonList(new FunctionLootingBonus()));
        pool.setEntries(Collections.singletonList(entry));
        pools.add(pool);
        pool = new LootPool();
        randomChance = new RandomChance();
        randomChance.setChance(0.025);
        randomChance.setLootingModifier(0.01);
        pool.setRandomChance(randomChance);
        pool.setConditions(Collections.singletonList(new ConditionKilledByPlayer()));
        entries = new ArrayList<>();
        entry = new LootEntry();
        entry.setMaterial(Material.IRON_INGOT);
        entries.add(entry);
        entry = new LootEntry();
        entry.setMaterial(Material.CARROT);
        entries.add(entry);
        entry = new LootEntry();
        entry.setMaterial(Material.POTATO);
        entries.add(entry);
        pool.setEntries(entries);
        pools.add(pool);
        defaults.put("HUSK", pools);
        defaults.put("ZOMBIE", pools);
        defaults.put("ZOMBIE_VILLAGER", pools);

        pools = new ArrayList<>();
        pool = new LootPool();
        entry = new LootEntry();
        entry.setMaterial(Material.POPPY);
        entry.setMinimumQuantity(0);
        entry.setMaximumQuantity(2);
        pool.setEntries(Collections.singletonList(entry));
        pools.add(pool);
        pool = new LootPool();
        entry = new LootEntry();
        entry.setMaterial(Material.IRON_INGOT);
        entry.setMinimumQuantity(3);
        entry.setMaximumQuantity(5);
        pool.setEntries(Collections.singletonList(entry));
        pools.add(pool);
        defaults.put("IRON_GOLEM", pools);

        pools = new ArrayList<>();
        pool = new LootPool();
        entries = new ArrayList<>();
        entry = new LootEntry();
        entry.setMaterial(Material.MAGMA_CREAM);
        entry.setMinimumQuantity(-2);
        entry.setFunctions(Collections.singletonList(new FunctionLootingBonus()));
        conditionSlimeSize = new ConditionSlimeSize();
        conditionSlimeSize.setMaximum(0);
        entry.setConditions(Collections.singletonList(conditionSlimeSize));
        entries.add(entry);
        entry = new LootEntry();
        entry.setMaterial(Material.MAGMA_CREAM);
        entry.setMinimumQuantity(-2);
        entry.setFunctions(Collections.singletonList(new FunctionLootingBonus()));
        conditionSlimeSize = new ConditionSlimeSize();
        conditionSlimeSize.setMinimum(2);
        entry.setConditions(Collections.singletonList(conditionSlimeSize));
        entries.add(entry);
        pool.setEntries(entries);
        pools.add(pool);
        defaults.put("MAGMA_CUBE", pools);

        pools = new ArrayList<>();
        pool = new LootPool();
        pool.setConditions(Collections.singletonList(new ConditionPropertiesAdult()));
        entry = new LootEntry();
        entry.setMaterial(Material.PORKCHOP);
        entry.setMaximumQuantity(3);
        function = new FunctionFurnaceSmelt();
        function.setConditions(Collections.singletonList(new ConditionPropertiesOnFire()));
        entry.setFunctions(Arrays.asList(function, new FunctionLootingBonus()));
        pool.setEntries(Collections.singletonList(entry));
        pools.add(pool);
        defaults.put("PIG", pools);

        pools = new ArrayList<>();
        pool = new LootPool();
        pool.setConditions(Collections.singletonList(new ConditionPropertiesAdult()));
        entries = new ArrayList<>();
        entry = new LootEntry();
        entry.setMaterial(Material.COD);
        entry.setWeight(3);
        entry.setFunctions(Collections.singletonList(new FunctionLootingBonus()));
        entries.add(entry);
        entry = new LootEntry();
        entry.setMaterial(Material.SALMON);
        entry.setFunctions(Collections.singletonList(new FunctionLootingBonus()));
        entries.add(entry);
        pool.setEntries(entries);
        pools.add(pool);
        defaults.put("POLAR_BEAR", pools);

        pools = new ArrayList<>();
        pool = new LootPool();
        pool.setConditions(Collections.singletonList(new ConditionPropertiesAdult()));
        entry = new LootEntry();
        entry.setMaterial(Material.RABBIT_HIDE);
        entry.setMinimumQuantity(0);
        entry.setFunctions(Collections.singletonList(new FunctionLootingBonus()));
        pool.setEntries(Collections.singletonList(entry));
        pools.add(pool);
        pool = new LootPool();
        pool.setConditions(Collections.singletonList(new ConditionPropertiesAdult()));
        entry = new LootEntry();
        entry.setMaterial(Material.RABBIT);
        entry.setMinimumQuantity(0);
        function = new FunctionFurnaceSmelt();
        function.setConditions(Collections.singletonList(new ConditionPropertiesOnFire()));
        entry.setFunctions(Collections.singletonList(function));
        pool.setEntries(Collections.singletonList(entry));
        pools.add(pool);
        pool = new LootPool();
        pool.setConditions(Collections.singletonList(new ConditionPropertiesAdult()));
        randomChance = new RandomChance();
        randomChance.setChance(0.1);
        randomChance.setLootingModifier(0.03);
        pool.setRandomChance(randomChance);
        entry = new LootEntry();
        entry.setMaterial(Material.RABBIT_FOOT);
        pool.setEntries(Collections.singletonList(entry));
        pools.add(pool);
        defaults.put("RABBIT", pools);

        pools = new ArrayList<>();
        pool = new LootPool();
        pool.setConditions(Collections.singletonList(new ConditionPropertiesAdult()));
        entry = new LootEntry();
        entry.setMaterial(Material.WHITE_WOOL);
        entry.setFunctions(Collections.singletonList(new FunctionMatchSheepWool()));
        pool.setEntries(Collections.singletonList(entry));
        pools.add(pool);
        pool = new LootPool();
        pool.setConditions(Arrays.asList(new ConditionPropertiesAdult(), new ConditionKilledByPlayer()));
        entry = new LootEntry();
        entry.setMaterial(Material.MUTTON);
        entry.setMaximumQuantity(2);
        function = new FunctionFurnaceSmelt();
        function.setConditions(Collections.singletonList(new ConditionPropertiesOnFire()));
        entry.setFunctions(Arrays.asList(function, new FunctionLootingBonus()));
        pool.setEntries(Collections.singletonList(entry));
        pools.add(pool);
        defaults.put("SHEEP", pools);

        pools = new ArrayList<>();
        pool = new LootPool();
        randomChance = new RandomChance();
        randomChance.setChance(0.5);
        randomChance.setLootingModifier(0.0625);
        pool.setRandomChance(randomChance);
        entry = new LootEntry();
        entry.setMaterial(Material.SHULKER_SHELL);
        pool.setEntries(Collections.singletonList(entry));
        pools.add(pool);
        defaults.put("SHULKER", pools);

        pools = new ArrayList<>();
        pool = new LootPool();
        entry = new LootEntry();
        entry.setMaterial(Material.ARROW);
        entry.setMinimumQuantity(0);
        entry.setMaximumQuantity(2);
        entry.setFunctions(Collections.singletonList(new FunctionLootingBonus()));
        pool.setEntries(Collections.singletonList(entry));
        pools.add(pool);
        pool = new LootPool();
        entry = new LootEntry();
        entry.setMaterial(Material.BONE);
        entry.setMinimumQuantity(0);
        entry.setMaximumQuantity(2);
        entry.setFunctions(Collections.singletonList(new FunctionLootingBonus()));
        pool.setEntries(Collections.singletonList(entry));
        pools.add(pool);
        defaults.put("SKELETON", pools);

        pools = new ArrayList<>();
        pool = new LootPool();
        pool.setConditions(Collections.singletonList(new ConditionPropertiesAdult()));
        entry = new LootEntry();
        entry.setMaterial(Material.BONE);
        entry.setMinimumQuantity(0);
        entry.setMaximumQuantity(2);
        entry.setFunctions(Collections.singletonList(new FunctionLootingBonus()));
        pool.setEntries(Collections.singletonList(entry));
        pools.add(pool);
        defaults.put("SKELETON_HORSE", pools);

        pools = new ArrayList<>();
        pool = new LootPool();
        entries = new ArrayList<>();
        entry = new LootEntry();
        entry.setMaterial(Material.SLIME_BALL);
        entry.setMinimumQuantity(0);
        entry.setMaximumQuantity(2);
        entry.setFunctions(Collections.singletonList(new FunctionLootingBonus()));
        conditionSlimeSize = new ConditionSlimeSize();
        conditionSlimeSize.setMaximum(0);
        entry.setConditions(Collections.singletonList(conditionSlimeSize));
        entries.add(entry);
        pool.setEntries(entries);
        pools.add(pool);
        defaults.put("SLIME", pools);

        pools = new ArrayList<>();
        pool = new LootPool();
        entry = new LootEntry();
        entry.setMaterial(Material.SNOWBALL);
        entry.setMinimumQuantity(0);
        entry.setMaximumQuantity(15);
        pool.setEntries(Collections.singletonList(entry));
        pools.add(pool);
        defaults.put("SNOWMAN", pools);

        pools = new ArrayList<>();
        pool = new LootPool();
        entry = new LootEntry();
        entry.setMaterial(Material.INK_SAC);
        entry.setMinimumQuantity(1);
        entry.setMaximumQuantity(3);
        entry.setFunctions(Collections.singletonList(new FunctionLootingBonus()));
        pool.setEntries(Collections.singletonList(entry));
        pools.add(pool);
        defaults.put("SQUID", pools);

        pools = new ArrayList<>();
        pool = new LootPool();
        entry = new LootEntry();
        entry.setMaterial(Material.ARROW);
        entry.setMinimumQuantity(0);
        entry.setMaximumQuantity(2);
        entry.setFunctions(Collections.singletonList(new FunctionLootingBonus()));
        pool.setEntries(Collections.singletonList(entry));
        pools.add(pool);
        pool = new LootPool();
        entry = new LootEntry();
        entry.setMaterial(Material.BONE);
        entry.setMinimumQuantity(0);
        entry.setMaximumQuantity(2);
        entry.setFunctions(Collections.singletonList(new FunctionLootingBonus()));
        pool.setEntries(Collections.singletonList(entry));
        pools.add(pool);
        pool = new LootPool();
        pool.setConditions(Collections.singletonList(new ConditionKilledByPlayer()));
        entry = new LootEntry();
        entry.setMaterial(Material.TIPPED_ARROW);
        entry.setMinimumQuantity(0);
        Map<String, Object> serializedMeta = new HashMap<>();
        serializedMeta.put("==", "ItemMeta");
        serializedMeta.put("meta-type", "POTION");
        serializedMeta.put("potion-type", "minecraft:slowness");
        FunctionSetMeta functionSetMeta = new FunctionSetMeta();
        functionSetMeta.setSerializedMeta(serializedMeta);
        entry.setFunctions(Arrays.asList(new FunctionLootingBonus(), functionSetMeta));
        pool.setEntries(Collections.singletonList(entry));
        pools.add(pool);
        defaults.put("STRAY", pools);

        pools = new ArrayList<>();
        pool = new LootPool();
        pool.setRollsMax(3);
        entries = new ArrayList<>();
        entry = new LootEntry();
        entry.setMaterial(Material.GLOWSTONE_DUST);
        entry.setMinimumQuantity(0);
        entry.setMaximumQuantity(2);
        entry.setFunctions(Collections.singletonList(new FunctionLootingBonus()));
        entries.add(entry);
        entry = new LootEntry();
        entry.setMaterial(Material.SUGAR);
        entry.setMinimumQuantity(0);
        entry.setMaximumQuantity(2);
        entry.setFunctions(Collections.singletonList(new FunctionLootingBonus()));
        entries.add(entry);
        entry = new LootEntry();
        entry.setMaterial(Material.REDSTONE);
        entry.setMinimumQuantity(0);
        entry.setMaximumQuantity(2);
        entry.setFunctions(Collections.singletonList(new FunctionLootingBonus()));
        entries.add(entry);
        entry = new LootEntry();
        entry.setMaterial(Material.SPIDER_EYE);
        entry.setMinimumQuantity(0);
        entry.setMaximumQuantity(2);
        entry.setFunctions(Collections.singletonList(new FunctionLootingBonus()));
        entries.add(entry);
        entry = new LootEntry();
        entry.setMaterial(Material.GLASS_BOTTLE);
        entry.setMinimumQuantity(0);
        entry.setMaximumQuantity(2);
        entry.setFunctions(Collections.singletonList(new FunctionLootingBonus()));
        entries.add(entry);
        entry = new LootEntry();
        entry.setMaterial(Material.GUNPOWDER);
        entry.setMinimumQuantity(0);
        entry.setMaximumQuantity(2);
        entry.setFunctions(Collections.singletonList(new FunctionLootingBonus()));
        entries.add(entry);
        entry = new LootEntry();
        entry.setMaterial(Material.STICK);
        entry.setWeight(2);
        entry.setMinimumQuantity(0);
        entry.setMaximumQuantity(2);
        entry.setFunctions(Collections.singletonList(new FunctionLootingBonus()));
        entries.add(entry);
        pool.setEntries(entries);
        pools.add(pool);
        defaults.put("WITCH", pools);

        pools = new ArrayList<>();
        pool = new LootPool();
        entry = new LootEntry();
        entry.setMaterial(Material.NETHER_STAR);
        pool.setEntries(Collections.singletonList(entry));
        pools.add(pool);
        defaults.put("WITHER", pools);

        pools = new ArrayList<>();
        pool = new LootPool();
        entry = new LootEntry();
        entry.setMaterial(Material.COAL);
        entry.setMinimumQuantity(-1);
        entry.setMaximumQuantity(1);
        entry.setFunctions(Collections.singletonList(new FunctionLootingBonus()));
        pool.setEntries(Collections.singletonList(entry));
        pools.add(pool);
        pool = new LootPool();
        entry = new LootEntry();
        entry.setMaterial(Material.BONE);
        entry.setMinimumQuantity(0);
        entry.setMaximumQuantity(2);
        entry.setFunctions(Collections.singletonList(new FunctionLootingBonus()));
        pool.setEntries(Collections.singletonList(entry));
        pools.add(pool);
        pool = new LootPool();
        randomChance = new RandomChance();
        randomChance.setChance(0.025);
        randomChance.setLootingModifier(0.01);
        pool.setRandomChance(randomChance);
        pool.setConditions(Collections.singletonList(new ConditionKilledByPlayer()));
        entry = new LootEntry();
        entry.setMaterial(Material.WITHER_SKELETON_SKULL);
        pool.setEntries(Collections.singletonList(entry));
        pools.add(pool);
        defaults.put("WITHER_SKELETON", pools);

        pools = new ArrayList<>();
        pool = new LootPool();
        randomChance = new RandomChance();
        randomChance.setChance(0.15);
        randomChance.setLootingModifier(0.0625);
        pool.setRandomChance(randomChance);
        pool.setConditions(Collections.singletonList(new ConditionKilledByPlayer()));
        entry = new LootEntry();
        entry.setMaterial(Material.IRON_AXE);
        pool.setEntries(Collections.singletonList(entry));
        pools.add(pool);
        pool = new LootPool();
        pool.setConditions(Collections.singletonList(new ConditionKilledByPlayer()));
        entry = new LootEntry();
        entry.setMaterial(Material.EMERALD);
        entry.setMinimumQuantity(0);
        entry.setFunctions(Collections.singletonList(new FunctionLootingBonus()));
        pool.setEntries(Collections.singletonList(entry));
        pools.add(pool);
        defaults.put("VINDICATION_ILLAGER", pools);

        pools = new ArrayList<>();
        pool = new LootPool();
        pool.setConditions(Collections.singletonList(new ConditionPropertiesAdult()));
        entry = new LootEntry();
        entry.setMaterial(Material.ROTTEN_FLESH);
        entry.setMinimumQuantity(0);
        entry.setMaximumQuantity(2);
        entry.setFunctions(Collections.singletonList(new FunctionLootingBonus()));
        pool.setEntries(Collections.singletonList(entry));
        pools.add(pool);
        defaults.put("ZOMBIE_HORSE", pools);

        pools = new ArrayList<>();
        pool = new LootPool();
        entry = new LootEntry();
        entry.setMaterial(Material.ROTTEN_FLESH);
        entry.setMinimumQuantity(0);
        entry.setFunctions(Collections.singletonList(new FunctionLootingBonus()));
        pool.setEntries(Collections.singletonList(entry));
        pools.add(pool);
        pool = new LootPool();
        entry = new LootEntry();
        entry.setMaterial(Material.GOLD_NUGGET);
        entry.setMinimumQuantity(0);
        entry.setFunctions(Collections.singletonList(new FunctionLootingBonus()));
        pool.setEntries(Collections.singletonList(entry));
        pools.add(pool);
        pool = new LootPool();
        randomChance = new RandomChance();
        randomChance.setChance(0.025);
        randomChance.setLootingModifier(0.01);
        pool.setRandomChance(randomChance);
        pool.setConditions(Collections.singletonList(new ConditionKilledByPlayer()));
        entry = new LootEntry();
        entry.setMaterial(Material.GOLD_INGOT);
        pool.setEntries(Collections.singletonList(entry));
        pools.add(pool);
        defaults.put("ZOMBIE_PIGMAN", pools);

        Map<String, Map<String, Collection<ILootPool>>> mappings = new HashMap<>();
        mappings.put("DEFAULT", defaults);

        return mappings;
    }

}
